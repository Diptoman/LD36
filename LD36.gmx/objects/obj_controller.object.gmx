<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.alarmTiming = 5; //Higher number = Less play speed

mode = "Placement"; //Placement or Play
currentSelection = ""; //In Placement mode, what is currently selected
currentSelectionID = -1;

portalList = ds_list_create();

particleList = ds_list_create();

//Init lists
initParticleX = ds_list_create();
initParticleY = ds_list_create();
initParticleDir = ds_list_create();
initParticleType = ds_list_create();

instance_create(x,y,obj_decorProducer);

endPointReaches = 0; //Number of end points reached
endPoints = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to next level
audio_resume_sound(snd_bg);
//Save if necessary
if (global.currentLevel &gt;= global.level)
{
    ds_list_replace(global.data,0,global.currentLevel + 1);
    tempfile=file_text_open_write("GameData.at");
    file_text_write_string(tempfile,ds_list_write(global.data));
    file_text_close(tempfile);
    global.level += 1;
}

global.currentLevel += 1;

//Go to next room
room_goto_next();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (endPointReaches == endPoints) &amp;&amp; (instance_number(obj_particle) == endPoints)
{
    if (alarm[0] &lt; 0)
    {
        alarm[0] = 130;
        audio_pause_sound(snd_bg);
        audio_play_sound(snd_finish,10,0);
        audio_sound_gain(snd_finish,.5,0);

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection mode placement
if ((mode == "Placement"))
{
    blankArea = collision_point(floor((mouse_x+16)/32)*32, floor((mouse_y+16)/32)*32,obj_blankArea,0,0);
    if ((mouse_x &lt; 928) //Mouse to the left
    &amp;&amp; (blankArea)) //Mouse is over blank space
    {
        if (blankArea.isFilled)
        {
            //If portal
            if (blankArea.tileType == "portal")
            {
                ds_list_delete(portalList,ds_list_find_index(portalList,blankArea.tileID));
            }
            
            //If splitter, delete underlying paths
            if ((blankArea.tileType == "ldSplitter") 
            || (blankArea.tileType == "rdSplitter")
            || (blankArea.tileType == "luSplitter")
            || (blankArea.tileType == "ruSplitter")
            || (blankArea.tileType == "rlSplitter")
            || (blankArea.tileType == "udSplitter"))
            {
                path = collision_point(blankArea.x,blankArea.y,obj_path,0,0);
                with (path) instance_destroy();
            }
            
            blankArea.tileType = "";
            blankArea.isFilled = false;
            (blankArea.selectionID).num += 1;
            blankArea.selectionID = -1;
        
            with (blankArea.tileID) instance_destroy();
            blankArea.tileID = -1;
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection mode placement
if ((mode == "Placement") &amp;&amp; (currentSelection != ""))
{
    if ((mouse_x &lt; 928) //Mouse to the left
    &amp;&amp; (currentSelectionID.num &gt; 0) //Spare tiles available
    &amp;&amp; (collision_point(floor((mouse_x+16)/32)*32, floor((mouse_y+16)/32)*32,obj_blankArea,0,0))) //Mouse is over blank space
    {
        toCreateObject = -1;
        switch(currentSelection)
        {
            case "path":
                toCreateObject = obj_path;
                break;
            case "ldPath":
                toCreateObject = obj_ldPath;
                break;
            case "rdPath":
                toCreateObject = obj_rdPath;
                break;
            case "ruPath":
                toCreateObject = obj_ruPath;
                break;
            case "luPath":
                toCreateObject = obj_luPath;
                break;
            case "rdSplitter":
                toCreateObject = obj_rdSplitter;
                break;
            case "ldSplitter":
                toCreateObject = obj_ldSplitter;
                break;
            case "ruSplitter":
                toCreateObject = obj_ruSplitter;
                break;
            case "luSplitter":
                toCreateObject = obj_luSplitter;
                break;
            case "rlSplitter":
                toCreateObject = obj_rlSplitter;
                break;
            case "udSplitter":
                toCreateObject = obj_udSplitter;
                break;
            case "colorShifter":
                toCreateObject = obj_colorShifter;
                break;
            case "portal":
                toCreateObject = obj_portal;
                break;
        }
        
        if (toCreateObject!=-1)
        {
            blankArea = collision_point(floor((mouse_x+16)/32)*32, floor((mouse_y+16)/32)*32,obj_blankArea,0,0);
            if (!blankArea.isFilled)
            {
                tile = instance_create(floor((mouse_x+16)/32)*32, floor((mouse_y+16)/32)*32,toCreateObject);
                blankArea.tileID = tile;
                blankArea.tileType = currentSelection;
                
                //Add info about current selection ID
                blankArea.selectionID = currentSelectionID;
                
                //Decrease number
                currentSelectionID.num -= 1;
                
                //Portal type
                if (currentSelection == "portal")
                {
                    tile.type = portalSub + 1;
                    
                    //Find destination, add set them
                    for(i=0;i&lt;ds_list_size(portalList);i++)
                    {
                        if (ds_list_find_value(portalList,i).type == (portalSub + 1))
                        {
                            (ds_list_find_value(portalList,i)).destinationID = tile.id;
                            tile.destinationID =  (ds_list_find_value(portalList,i)).id;
                        }
                    }
                    
                    ds_list_add(portalList,tile);
                }
                
                blankArea.isFilled = 1;
            }
            
            //Change the area
        }
        
        //show_message("LOL");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection Mode Draw
if (mode == "Placement")
{
    toDrawSprite = -1;
    toDrawSubImage = 0;
    if (mouse_x &lt; 960)
    {
        switch(currentSelection)
        {
            case "path":
                toDrawSprite = spr_path;
                break;
            case "ldPath":
                toDrawSprite = spr_ldPath;
                break;
            case "rdPath":
                toDrawSprite = spr_rdPath;
                break;
            case "ruPath":
                toDrawSprite = spr_ruPath;
                break;
            case "luPath":
                toDrawSprite = spr_luPath;
                break;
            case "rdSplitter":
                toDrawSprite = spr_rdSplitter;
                break;
            case "ldSplitter":
                toDrawSprite = spr_ldSplitter;
                break;
            case "ruSplitter":
                toDrawSprite = spr_ruSplitter;
                break;
            case "luSplitter":
                toDrawSprite = spr_luSplitter;
                break;
            case "rlSplitter":
                toDrawSprite = spr_rlSplitter;
                break;
            case "udSplitter":
                toDrawSprite = spr_udSplitter;
                break;
            case "colorShifter":
                toDrawSprite = spr_colorShifter;
                break;
            case "portal":
                toDrawSprite = spr_portalUI; 
                toDrawSubImage = portalSub;
                break;
        }
        
        if (toDrawSprite!=-1)
        {
            draw_sprite_ext(toDrawSprite,toDrawSubImage,floor((mouse_x+16)/32)*32, floor((mouse_y+16)/32)*32,image_xscale,image_yscale,0,c_white,1);
            if (currentSelectionID.num == 0)
                draw_sprite_ext(spr_redBlank,0,floor((mouse_x+16)/32)*32, floor((mouse_y+16)/32)*32,image_xscale,image_yscale,0,c_white,.33);
        }
        
        //show_message("LOL");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_levelselect1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
